{"version":3,"sources":["components/Loading.jsx","components/Username.jsx","components/Chatter.jsx","components/App.jsx","index.js"],"names":["Loader","props","Fragment","className","UsernameSelection","color","useRef","rndC","style","backgroundColor","current","action","onSubmit","submit","type","name","id","placeholder","required","RenderMsg","user","author","msg","RenderChat","socket","data","map","value","index","message","_id","sender","ref","inputRef","io","App","useState","conn","connected","setData","username","setUsername","msgInput","useEffect","on","iniData","e","preventDefault","emit","target","Username","Main","render","document","getElementById"],"mappings":"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","file":"static/js/main.3b048b04.chunk.js","sourcesContent":["import React from \"react\"\r\nimport '../css/style.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nconst Loader = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"loading\">\r\n                Loading ...\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Loader","import React, { useRef } from 'react'\r\nimport rndC from 'randomcolor'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport '../css/style.css'\r\n\r\nconst UsernameSelection = (props) => {\r\n    const color = useRef(rndC())\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"username\" style={{backgroundColor: `${color.current}`}}>\r\n                <div className=\"username-main\">\r\n                    <form action=\".\" onSubmit={props.submit}>\r\n                        <div className=\"input-fields\">\r\n                            <h3>Username Selection</h3>\r\n                            <p>Before proceeding into the chat application, you must provide a username to identify the message senders and receivers. Everytime you refresh the chat page, you will have to provide a new username, so we don't recommend refreshing the page for no reason. Don't put sensitive information as your username.</p>\r\n                            <input type=\"text\" className=\"form-control\" name=\"username\" id=\"floatingInput\" placeholder=\"Username\" required />\r\n                            <button type=\"submit\" className=\"username-submit\">Submit</button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default UsernameSelection","import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport '../css/style.css'\r\n\r\nconst RenderMsg = (props) => {\r\n    if (props.user === props.author) {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"message\">\r\n                        <div className=\"bubble bg-primary text-white\">{props.msg}</div>\r\n                    <small className=\"text-end mt-4\">{props.author} [You]</small>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"message\">\r\n                        <div className=\"bubble-2 text-black\">{props.msg}</div>\r\n                    <small className=\"text-start ms-2 mt-4\">{props.author}</small>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst RenderChat = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"main-container\">\r\n                <div className=\"chatbox\">\r\n                    <div className=\"chat-view\">\r\n                        <div className=\"id-container\">\r\n                            <code>Welcome, {props.user}! ID: <samp>{props.socket.id}</samp></code>\r\n                        </div>\r\n                        {\r\n                            props.data \r\n                            ? \r\n                            props.data.map((value, index) => {\r\n                                return (\r\n                                    <RenderMsg key={value._id} author={value.author} msg={value.message} user={props.user} />\r\n                                )\r\n                            })\r\n                            :\r\n                            <h5 className=\"text-center\">No messages yet, be the first one!</h5>\r\n                        }\r\n                    </div>\r\n                    <div className=\"chat-inputs\">\r\n                        <form action=\".\" onSubmit={props.sender}>\r\n                            <input type=\"text\" className=\"form-control\" name=\"msg\" id=\"floatingInput\" placeholder=\"Message\" ref={props.inputRef} required />\r\n                            <button type=\"submit\">Send</button>\r\n                        </form> \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default RenderChat\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport { io } from 'socket.io-client'\r\nimport Loader from './Loading'\r\nimport UsernameSelection from './Username'\r\nimport Chat from './Chatter'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nconst socket = io('https://vast-waters-60826.herokuapp.com')\r\nconst App = (props) => {\r\n    const [conn, connected] = useState(false)\r\n    const [data, setData] = useState([])\r\n    const [username, setUsername] = useState(null)\r\n    const msgInput = useRef(null)\r\n    useEffect(() => {\r\n        socket.on('connect', () => {\r\n            connected(true)\r\n        })\r\n        socket.on('initialData', iniData => {\r\n            setData(iniData)\r\n        })\r\n        socket.on('msgRecv', data => {\r\n            setData(data)\r\n        })\r\n    }, [])\r\n    const usernameHandler = (e) => {\r\n        e.preventDefault()\r\n        setUsername(e.target.username.value)\r\n    }\r\n    const sendMsg = (e) => {\r\n        e.preventDefault()\r\n        socket.emit('msgSend', e.target.msg.value, username)\r\n        msgInput.current.value = ''\r\n    }\r\n    if (username) {\r\n        if (conn) {\r\n            return (\r\n                <React.Fragment>\r\n                    <Chat data={data} sender={sendMsg} user={username} socket={socket} inputRef={msgInput} />\r\n                </React.Fragment>\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <React.Fragment>\r\n                    <Loader />\r\n                </React.Fragment>\r\n            )\r\n        }\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment>\r\n                <UsernameSelection submit={usernameHandler} />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","import React from 'react'\nimport { render } from 'react-dom'\nimport App from './components/App'\n\nconst Main = (props) => {\n  return (\n    <React.Fragment>\n      <App />\n    </React.Fragment>\n  )\n}\n\nrender(<Main />, document.getElementById('root'))\n"],"sourceRoot":""}